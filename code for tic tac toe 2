
using System;

namespace CyberForum
{
    class Program
    {
        static void Main()
        {
            Board board = new Board();
            board.Reset();

            int x = 0;
            int y = 0;

            while (true)
            {
                Console.Clear();
                Console.WriteLine("УПРАВЛЕНИЕ:\nArrows - переместиться\nSpace - сделать ход\nEsc - сброс\n\n");
                Console.WriteLine("Ход для {0}:\n", board.TurnX ? "КРЕСТИКА" : "НОЛИКА");

                for (int i = 0; i < 3; i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        if (i == y && j == x)
                        {
                            Console.BackgroundColor = ConsoleColor.Red;
                            Console.ForegroundColor = ConsoleColor.White;
                        }

                        Console.Write($" {board[i, j]} ");
                        Console.ResetColor();
                    }
                    Console.WriteLine();
                }

                Board.State state = board.GetState;
                if (state == Board.State.ZeroWins)
                    Console.WriteLine("НОЛИКИ ПОБЕДИЛИ!!!");
                else if (state == Board.State.CrossWins)
                    Console.WriteLine("КРЕСТИКИ ПОБЕДИЛИ!!!");
                else if (state == Board.State.Friedship)
                    Console.WriteLine("НИЧЬЯ!");
                var key = Console.ReadKey().Key;

                if (key == ConsoleKey.Spacebar) board.Turn(x, y);
                else if (key == ConsoleKey.LeftArrow) x--;
                else if (key == ConsoleKey.RightArrow) x++;
                else if (key == ConsoleKey.UpArrow) y--;
                else if (key == ConsoleKey.DownArrow) y++;
                else if (key == ConsoleKey.Escape)
                {
                    x = y = 0;
                    board.Reset();
                }

                x = clamp(x, 0, 2);
                y = clamp(y, 0, 2);

            }
        }
        private static int clamp(int value, int min, int max)
        {
            if (value < min) return min;
            if (value > max) return max;
            return value;
        }

    }
    public class Board
    {
        public enum State
        {
            None, CrossWins, ZeroWins, Friedship
        }

        public State GetState => getBoardState();
        public bool TurnX { get; private set; }

        private char[,] _board;

        private const char X = 'X';
        private const char O = 'O';
        private const char EMPTY = '-';

        public char this[int y, int x] => _board[y, x];

        public Board()
        {
            Reset();
        }

        public void Reset(bool beginFromX = true)
        {
            if (_board == null)
                _board = new char[3, 3];

            for (int i = 0; i < 9; i++)
                _board[i / 3, i % 3] = EMPTY;

            TurnX = beginFromX;
        }

        public void Turn(int x, int y) // очередь. кто когда ходит 
        {
            if (x < 0 || x > 2) return;
            if (y < 0 || y > 2) return;
            if (_board[y, x] != EMPTY) return;

            _board[y, x] = TurnX ? X : O;
            TurnX = !TurnX;
        }
        private State getBoardState()
        {
            int XXX = X * 3;
            int OOO = O * 3;

            for (int i = 0; i < 3; i++)
            {
                // строка
                int resRow = _board[i, 0] + _board[i, 1] + _board[i, 2];

                // колонка
                int resCol = _board[0, i] + _board[1, i] + _board[2, i];

                if (resRow == XXX || resCol == XXX) return State.CrossWins;
                else if (resRow == OOO || resCol == OOO) return State.ZeroWins;
            }

            //диагонали
            int d1 = _board[0, 0] + _board[1, 1] + _board[2, 2];
            int d2 = _board[2, 0] + _board[1, 1] + _board[0, 2];

            if (d1 == XXX || d2 == XXX) return State.CrossWins;
            else if (d1 == OOO || d2 == OOO) return State.ZeroWins;


            // нет победы, но остались пустые  места
            for (int i = 0; i < 9; i++)
                if (_board[i / 3, i % 3] == EMPTY) return State.None;

            // нет победы и нет пустых мест
            return State.Friedship;

        }
    }
}
